---
# populate a fresh Pop!_os instance
- hosts: 127.0.0.1
  connection: local
  vars:
    local_user: "{{ ansible_user_id }}"
    local_home: "{{ lookup('env','HOME') }}"
    region_loc: "nl_NL.UTF-8"
    new_hostname: devxps
    gist_file: '{{ playbook_dir.split("/")[0:-1]|join("/") }}/18dafb104e93c9a2362ffe85c0dfd02e/dconf-settings.dconf'
    gnome_extension_ids:
      - 1160	# Dash2Panel
      - 277	  # impatience
      - 906	  # sound input and output device chooser
      - 351	  # Icon Hider
  
  roles:
    - {role: gui_apps, tags: 'gui_apps'}
    - {role: apt-packages, tags: 'apt-packages'}
    - {role: dropbox, tags: 'dropbox'}
    - {role: jaredhocutt.gnome_extensions, tags: 'gnome_extensions'}
   
  tasks:      
  - name: Set user settings
    become: yes
    user:
       name: "{{ local_user }}"
       shell: /usr/bin/zsh
       generate_ssh_key: yes

  - name: Set hostname of the machine
    become: yes
    shell: "echo '{{ new_hostname }}' > '/etc/hostname'"

  - name: Create dirs
    file:
      path: "{{ item }}"
      state: directory
    with_items:
      - "{{ local_home }}/storage"
      - "{{ local_home }}/Apps"

  - name: Make sudo docker paswordless
    become: yes
    lineinfile:
      path: /etc/sudoers.d/docker
      line: '%sudo  ALL=(ALL:ALL) NOPASSWD:/snap/bin/docker'
      create: yes
      owner: root
      mode: '0440'

  - name: Test if oh-my-zsh is present.
    stat:
      path: "{{ local_home }}/.oh-my-zsh"
    register: ohmyzsh

  - name: Install "oh-my-zsh"
    shell: sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
    when: not ohmyzsh.stat.exists
  
  - name: Clone dotfiles
    git:
      repo: "https://github.com/kevinjelnl/dotfiles.git"
      dest: "{{ local_home }}/dotfiles"
      update: no
      
  - name: Set dotfiles
    shell: ./install
    args:
      chdir: "{{ local_home }}/dotfiles"
      
  - name: Ensure a locale exists
    become: yes
    locale_gen:
      name: "{{ region_loc }}"
      state: present

  - name: Test if submodule with gist is present
    stat:
      path: "{{ gist_file }}"
    register: dconfisthere

  - name: load DCONF settings
    shell: "dconf load '/' < '{{ gist_file }}'"
    when: dconfisthere.stat.exists
  
  - name: Set a cron to dump dconf into our gist
    cron:
      name: "Dump the dconf settings into a file"
      special_time: weekly
      job: "eval 'dconf dump / > {{ gist_file }}'"

  - name: Set a cron to start Cryptomator after a reboot
    cron:
      name: "Dump the dconf settings into a file"
      special_time: reboot
      job: "nohup {{ local_home }}/Apps/cryptomator.AppImage &> /dev/null"
